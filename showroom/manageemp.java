package showroom;
import java.awt.Image;
import java.awt.event.KeyEvent;

import java.io.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

public class manageemp extends javax.swing.JInternalFrame implements connection{
    File myfile;
    String oldfilename;
    public manageemp() {
        initComponents();///IMPORTANT===YOU ARE NEVER ALLOWED TO WRITE ANYTHING ABOVE THIS(initComponents())====

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Add Employee");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Add Employee");

        jLabel2.setText("Name");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel3.setText("Phone ");

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jLabel4.setText("Address");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel5.setText("Gender");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Male");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Female");

        jLabel6.setText("Username");

        jLabel7.setText("Password");

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Usertype");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Employee" }));

        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Update");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Search");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Phone", "Address", "Gender", "Username"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jLabel9.setText("DOB");

        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton6.setText("Choose Image");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Our Employees");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jRadioButton1)
                                                .addGap(4, 4, 4)
                                                .addComponent(jRadioButton2))
                                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jButton5)))
                                        .addGap(83, 83, 83)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(28, 28, 28)
                                                .addComponent(jButton6))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(34, 34, 34)
                                        .addComponent(jButton2))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(123, 123, 123)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton3)))))
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)))
                        .addGap(74, 74, 74)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(214, 214, 214))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton6))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton5)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel2)
                                .addGap(15, 15, 15)
                                .addComponent(jLabel3)))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton1)
                                    .addComponent(jRadioButton2))
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2))
                                .addGap(18, 18, 18)
                                .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel6)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel7)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton3)
                            .addComponent(jButton4))
                        .addGap(122, 122, 122))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    if(validin())      
    {
        String filename="";
        if(myfile!=null)//CHECKS IF ANY FILE IS SELECTED OR NOT
        {
        filename = new java.util.Date().getTime() + myfile.getName();//Date.getTime() added for unique file name.
        int i;
        FileInputStream rd = null;//IT OBTAINS INPUT BYTES FROM A FILE
        FileOutputStream outs = null;//WRITES DATA IN A FILE

        try
        {
            rd = new FileInputStream(myfile);//MAKES CONNECTION WITH THE FILE
            outs = new FileOutputStream("uploads\\"+filename);//writing the new file in 'Images' folder, in the project

            byte[] b = new byte[2048];
            while ((i = rd.read(b)) !=-1) //RETURNS -1 IS FILE(rd) IS COMPLETELY READ
            {
                outs.write(b, 0, i); //copying from pictures to empimages byte by byte,,,,0 IS START INDEX,, b IS THE DATA
            }

            } 
            catch (Exception e) 
            {
            JOptionPane.showMessageDialog(rootPane, "error" + e.getMessage());
            } 
            finally {
            try {
                rd.close();
                outs.close();//THESE BOTH MUST BE CLOSED
                } 
                catch (Exception e) 
                {
                    JOptionPane.showMessageDialog(rootPane, "error in closing file" + e.getMessage());
                }
            }
        }
        else
        {
        filename="default.jpg";
        //IF NO FILE IS SELECTED THEN DEFAULT NO IMAGE IS UPLOADED 
        }

        try   //TO ADD
       {
         
         Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);//MAKING CONNECTION
            try
             {
                 String q="insert into signup values(?,?,?,?,?,?,?,?,?)";//SENDING QUERY
 
                 PreparedStatement myst = myconn.prepareStatement(q);
                myst.setString(1, jTextField1.getText());//FILLING QUERY
                myst.setString(2, jTextField2.getText());
                myst.setString(3, jTextArea1.getText());
                if(jRadioButton1.isSelected())
                {
                myst.setString(4, "Male");
                }
                else if(jRadioButton2.isSelected())
                {
                myst.setString(4, jRadioButton2.getText());
                }
                myst.setString(5, jTextField3.getText());
                myst.setString(6, jPasswordField1.getText());
                myst.setString(7, jComboBox1.getSelectedItem().toString());//TAKES SELECTED ITEM FROM THE COMBO BOX AND CONVERTS IT INTO STRING
                
                Date dob=jDateChooser1.getDate();
                SimpleDateFormat myformat=new SimpleDateFormat("yyyy-MM-dd");//MM since mm is for minutes
                String dtob=myformat.format(dob);
                myst.setString(8, dtob);
                myst.setString(9, filename);
                int count = myst.executeUpdate();//HERE OUTPUT IS 1 IF EXECUTED SUCCESFULLY
                DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
             
                if(count==1)
                {
                    mymodel.setRowCount(0);    
                    JOptionPane.showMessageDialog(rootPane, "Employee added successfully");
                    this.clearfields();//CALLS THE FUNCTION WHICH CLEAR ALL FIELDS SO THAT WE CAN ENTER NEW MEMBERS ALSO
                    fetchtable();
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "Employee not added successfully");
                }
             }
            catch(Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane, "Error in inputting " + e.getMessage());
                }
            finally
            {
                myconn.close();//CONNECTION MUST BE CLOSED
            }
            
             
 }
 catch(Exception e)
 {
   JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
 }
 
    } //IMPORTANT - FOR RADIOBUTTONS,ADD BUTTONGROUP TO SCREEN AND IN PROPERTIES OF RADIOBUTTONS GROUP(GIVE/ASSIGN) THEM IN SAME BUTTONGROUP
        
    }//GEN-LAST:event_jButton1ActionPerformed
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       
        try   //TO SEARCH WITH USERNAME
     {
     Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);
     try
     {
        String q="select * from signup where username=? and usertype=?";

        PreparedStatement myst = myconn.prepareStatement(q);
        myst.setString(1, jTextField3.getText());
        myst.setString(2, "Employee");


       ResultSet myres = myst.executeQuery();
       DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
        if(myres.next())
        {
            mymodel.setRowCount(0);
        do
        {

            jTextField1.setText(myres.getString("name"));
            jTextField2.setText(myres.getString("phone"));
            jTextArea1.setText(myres.getString("address"));
            if(myres.getString("gender").equalsIgnoreCase("male"))
            {
            jRadioButton1.setSelected(true);
            }
            else if(myres.getString("gender").equalsIgnoreCase("female"))
            {
            jRadioButton2.setSelected(true);
            }
            jTextField3.setText(myres.getString("username"));
            jPasswordField1.setText(myres.getString("password"));

            jComboBox1.setSelectedItem(myres.getString("usertype"));
            jDateChooser1.setDate(myres.getDate("DOB"));
            String myfile=myres.getString("pic");
            oldfilename=myfile;
            Image simg = ImageIO.read( new File("uploads//" + myfile)).getScaledInstance( jLabel10.getWidth(), jLabel10.getHeight(), Image.SCALE_DEFAULT);
            jLabel10.setIcon(new ImageIcon(simg));//IMAGEICON=CREATES IMAGE ICON FOR THE IMAGE
            jButton3.setEnabled(true);// ENABLES UPDATE AND DELETE BUTTON
            jButton4.setEnabled(true);
         }
        while(myres.next());
    }
    else
    {
        JOptionPane.showMessageDialog(rootPane, "No records found");//SHOWS MESSAGE IN DIALOG BOX
        clearfields();
        jButton3.setEnabled(false);//DISABLES UPDATE AND DELETE BUTTON IF NO RECORD IS FOUND
        jButton4.setEnabled(false);
    }

    }
    catch(Exception e)
    {
        JOptionPane.showMessageDialog(rootPane, "Error Occured while searching uname" + e.getMessage());
    }
    finally
    {
        myconn.close();
    }
    }
    catch(Exception e)
    {
        JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
    }   
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
if(validin())
{
String filename;
if(myfile!=null)//IF NO FILE IS SELECTED
{
    filename = new java.util.Date().getTime() + myfile.getName();//Date.getTime() added for unique file name.
    int i;
    FileInputStream rd = null;
    FileOutputStream outs = null;
    try 
    {
        rd = new FileInputStream(myfile);
        outs = new FileOutputStream("uploads\\"+filename);//writing the new file in 'uploads' folder, in the project

        byte[] b = new byte[2048];
        while ((i = rd.read(b)) !=-1) 
        {
                outs.write(b, 0, i); //copying from pictures to empimages byte by byte
        }
    } 
    catch (Exception e) 
    {
        JOptionPane.showMessageDialog(rootPane, "error" + e.getMessage());
    } 
    finally 
    {
        try 
        {
            rd.close();
            outs.close();
        }
        catch (Exception e) 
        {
            JOptionPane.showMessageDialog(rootPane, "error in closing file" + e.getMessage());
        }
    }
        File oldimage=new File("uploads\\" + oldfilename);
        if(!oldimage.getName().equals("default.jpg"))//IF IMAGE IS NOT DEFAULT WHILE UPDATING THAT IS SOME NEW IMAGE IS SELECTED, THEN DELETE THE OLD IMAGE
        {
            oldimage.delete();
        }

}
else
{
    filename=oldfilename;//IF NO FILE IS SELECTED THEN SET THE OLD PIC
}
    
 try  //TO UPDATE
 {
 
 Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);//IMPORTANT- WE CALL CONSTRUCTOR OR IMPORT STATIC ITS VARIABLES THAT WE USE WHILE MAKING CONNECTION  
 try
 {
 String q="update signup set name=?,phone=?,address=?,gender=?,password=?,usertype=?,DOB=?,pic=? where username=?";
//UPDATE AND DELETE ARE VERY RISKY COMMANDS AS IF WE DONT ADD WHERE ALL THE RECORDS WILL BE UPDATED/DELETED
 PreparedStatement myst = myconn.prepareStatement(q);
 myst.setString(1, jTextField1.getText());
 myst.setString(2, jTextField2.getText());
 myst.setString(3, jTextArea1.getText());
 if(jRadioButton1.isSelected())
 {
 myst.setString(4, "Male");
 }
 else if(jRadioButton2.isSelected())
 {
 myst.setString(4, jRadioButton2.getText());
 }
 
 myst.setString(5, jPasswordField1.getText());
 myst.setString(6, jComboBox1.getSelectedItem().toString());
 
    Date dob=jDateChooser1.getDate();
    SimpleDateFormat myformat=new SimpleDateFormat("yyyy-MM-dd");//MM since mm is for minutes
    String dtob=myformat.format(dob);
    myst.setString(7, dtob);
    myst.setString(8, filename);
 myst.setString(9, jTextField3.getText());
// EVERY AREA IS UPDATED AGAIN
 int count = myst.executeUpdate();
DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                   
 if(count==1)
 {
     mymodel.setRowCount(0);   
 JOptionPane.showMessageDialog(rootPane, "Employee updated successfully");
 clearfields();  // THIS IS OPTIONAL
 fetchtable();
 }
 else
 {
 JOptionPane.showMessageDialog(rootPane, "Employee not updated successfully");
 }

 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error Occured while updating" + e.getMessage());
 }
 finally
 {
 myconn.close();
 }
 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
 }
 
}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        if(jTextField1.getText().length()!=0)
        {
        try               //TO SEARCH WITH NAME
        {
        Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);
        try
        {
        String q="select * from signup where name like ? and usertype=?";
        PreparedStatement myst = myconn.prepareStatement(q);
        myst.setString(1, "%"+jTextField1.getText()+"%");    //NOTE
        myst.setString(2, "employee");
        ResultSet myres = myst.executeQuery();
        DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
        if(myres.next())
        {
           mymodel.setRowCount(0);
           clearfields();
         do
         {
        String n=myres.getString("name");
        String ph=myres.getString("phone");
        String add=myres.getString("address");
        String gen=myres.getString("gender");
        String un=myres.getString("username");
        Object myrow[] = {n,ph,add,gen,un};    //NOTE METHOD TO ADD IN TABLE
        mymodel.addRow(myrow);
        }
        while(myres.next());
        }
        else
        {
        JOptionPane.showMessageDialog(rootPane, "No records found");
        mymodel.setRowCount(0);
        clearfields();
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        }

        }
        catch(Exception e)
        {
        JOptionPane.showMessageDialog(rootPane, "Error Occured while searching name" + e.getMessage());
        }
        finally
        {
        myconn.close();
        }
        }
        catch(Exception e)
        {
        JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
        }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter name");
        }
 
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
 int uchoice = JOptionPane.showConfirmDialog(rootPane,"Are you sure to delete?");//SHOWS A CONFIRM DIALOG BOX
 if(uchoice==JOptionPane.YES_OPTION)//YES OPTION GIVES AN INTEGER
 {
 try      //("important")- comment all this core java work on sat/sun
 {      //TO DELETE
 
 Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);
 try
 {
      
 String q="delete from signup where username=?";

 PreparedStatement myst = myconn.prepareStatement(q);
 myst.setString(1, jTextField3.getText());
 int count = myst.executeUpdate();

 if(count==1)
 {
     if(jTable1.getSelectedRowCount()!=0)
     {
      JOptionPane.showMessageDialog(rootPane, "Employee deleted successfully");
      DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
      mymodel.removeRow(jTable1.getSelectedRow());
      clearfields();
      fetchtable();
     }
     else
     {
         JOptionPane.showMessageDialog(rootPane, "Employee deleted successfully");
         clearfields();
     }
 }
 else
 {
 JOptionPane.showMessageDialog(rootPane, "Employee not deleted successfully");
 }

 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error Occured while deleting" + e.getMessage());
 }
 finally
 {
 myconn.close();
 }
 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
 }
 }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
     String un = jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString();//4 here is column number
 try
 {
 Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);
 try
 {
 String q="select * from signup where username=?";

 PreparedStatement myst = myconn.prepareStatement(q);
 myst.setString(1,un);
 

 ResultSet myres = myst.executeQuery();

 if(myres.next())
 {
 jTextField1.setText(myres.getString("name"));
 jTextField2.setText(myres.getString("phone"));
 jTextArea1.setText(myres.getString("address"));
 if(myres.getString("gender").equalsIgnoreCase("male"))
 {
 jRadioButton1.setSelected(true);
 }
 else if(myres.getString("gender").equalsIgnoreCase("female"))
 {
 jRadioButton2.setSelected(true);
 }
 jTextField3.setText(myres.getString("username"));
 jPasswordField1.setText(myres.getString("password"));
 
 jComboBox1.setSelectedItem(myres.getString("usertype"));
 
 jDateChooser1.setDate(myres.getDate("DOB"));
 
 String myfile=myres.getString("pic"); 
 oldfilename=myfile;
 Image simg = ImageIO.read( new File("uploads//" + myfile)).getScaledInstance( jLabel10.getWidth(), jLabel10.getHeight(), Image.SCALE_DEFAULT);
 jLabel10.setIcon(new ImageIcon(simg));
 
 jButton3.setEnabled(true);
 jButton4.setEnabled(true);
 
 }
 else
 {
 JOptionPane.showMessageDialog(rootPane, "No records found");
 clearfields();
 jButton3.setEnabled(false);
 jButton4.setEnabled(false);
 }

 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error Occured while mouse clicking" + e.getMessage());
 }
 finally
 {
 myconn.close();
 }
 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
 }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFileChooser myfilechooser=new JFileChooser();//MAKING OBJ OF FILE CHOOSER
        myfilechooser.setFileFilter(new FileFilter() //FILTERINIG THE FILES FROM FOLDER
        {
        @Override
        public boolean accept(File f) //SELECTING/ACCEPTING THE PARTICULAR FILES
        {   //RETURN TRUE TO SHOW THAT PARTICULAR FILE
            if(f.isDirectory()) //ACCEPTS ALL DIRECTORY(E.G. C DRIVE)
                return true;

            String extension=f.getName().substring(f.getName().lastIndexOf(".")+1);//GETTING THE EXTENSION OF IMAGE NAME
            String allowed[]={"jpg","png","gif","jpeg","bmp"};
            for(String a:allowed)//FOR EACH LOOP
            {
                if(a.equals(extension))//IF EXTENSION MATCHES,,RETURN TRUE
                {
                    return true;
                }
               else
                   {
                    return false;
                }
            }
            return false;//IF ANYTHING ELSE RETURN FALSE
        }

        @Override
        public String getDescription() //THIS WILL BE SHOWN UNDER THE FILE NAME OPTION IN FILE CHOOSER
        {
        return "All Picture Files";
        }
        });
//TILL NOW WE JUST SELECTED FILES TO SHOW IN FILECHOOSER

        if(myfilechooser.showOpenDialog(rootPane)==JFileChooser.APPROVE_OPTION)//OPENDIALOG IS ANOTHER THING TO OPEN AND GIVES TRUE IF "OPEN" IS SELECTED
        {
            myfile=myfilechooser.getSelectedFile();//MYFILE NOW CONTAINS THE IMAGE
            try
            { 
                Image simg = ImageIO.read( new File(myfile.getAbsolutePath())).getScaledInstance( jLabel10.getWidth(), jLabel10.getHeight(), Image.SCALE_AREA_AVERAGING);//GIVES IMAGE OF DIFF QUALITY
        //TO FIT IMAGE IN LABEL=READ IN NEW VARIABLE,,GET ABSOUTE PATH OF "MYFILE" WE SCALE IT ACC TO SIZE OF OUR LABEL  
        // HERE READ RETURNS A BUFFERED IMAGE
                jLabel10.setIcon(new ImageIcon(simg));// WE SET ICON SIMILAR TO SET STRING
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(rootPane, "Cannot read image");
            }
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        char c=evt.getKeyChar();
        if(!(Character.isAlphabetic(c) || (c==KeyEvent.VK_BACK_SPACE|| c==KeyEvent.VK_DELETE || c==KeyEvent.VK_SPACE )))
        evt.consume();       //NOTE
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        char c=evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE|| c==KeyEvent.VK_DELETE)))
        evt.consume();
    }//GEN-LAST:event_jTextField2KeyTyped

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        fetchtable();
    }//GEN-LAST:event_formInternalFrameOpened
    
    void fetchtable()
    {
         try              
        {
            Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);
            try
            {
                String q="select * from signup where usertype=?";
                PreparedStatement myst = myconn.prepareStatement(q);
                myst.setString(1,"employee");
                ResultSet myres = myst.executeQuery();
                DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                if(myres.next())
                {
                   mymodel.setRowCount(0);
                 do
                 {
                    String phone=myres.getString("phone");
                    String name=myres.getString("name");
                    String address=myres.getString("address");
                    String gender=myres.getString("gender");
                    String username=myres.getString("username");
                    Object myrow[] = {name,phone,address,gender,username};
                    mymodel.addRow(myrow);
                    }
                    while(myres.next());
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "No Employee found");
                    mymodel.setRowCount(0);
             
                }

        }
        catch(Exception e)
        {
        JOptionPane.showMessageDialog(rootPane, "Error Occured while searching employee" + e.getMessage());
        }
        finally
        {
        myconn.close();
        }
        }
        catch(Exception e)
        {
        JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
        }
    }
    
    boolean validin()
    {
        if(jTextField1.getText().length()==0)
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter a name");
            return false;
        }
//        if(!(textfield of email).getText().contains("@"))
//        {
//            JOptionPane.showMessageDialog(rootPane, "Please enter valid email");
//            return false;
//        }
        
        if(jTextField2.getText().length()!=10)
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter a valid phone number");
            return false;
        }
        if(jTextArea1.getText().length()==0)
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter address");
            return false;
        }
        if(jRadioButton1.isSelected()==false && jRadioButton2.isSelected()==false)//IMPORTANT
        {
            JOptionPane.showMessageDialog(rootPane, "Please select gender");
            return false;
        }

        if(jTextField3.getText().length()==0)
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter username");
            return false;
        }
        if(jPasswordField1.getText().length()==0)
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter password");
            return false;
        }
        if(jComboBox1.getSelectedIndex()==0)//IMPORTANT
        {
            JOptionPane.showMessageDialog(rootPane, "Please chooose usertype");
            return false;
        }
        if(jDateChooser1.getDate()==null)//IMPORTANT
        {
            JOptionPane.showMessageDialog(rootPane, "Please choose a date");
            return false;
        }
        else
        {
            return true;
        }
    }
    void clearfields()
    {
        jTextField1.setText(null);
        jTextField2.setText(null);
        jTextField3.setText(null);
        buttonGroup1.clearSelection();//CLEARS SELECTON OF RADIO BUTTONS
        jTextArea1.setText(null);
        jPasswordField1.setText(null);
        jComboBox1.setSelectedIndex(0);//SETS INDEX TO 0 THAT IS CHOOSE
        jDateChooser1.setDate(null);
        jLabel10.setIcon(null);
    }  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
