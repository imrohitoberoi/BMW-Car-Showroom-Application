package showroom;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static showroom.connection.dbpass;
import static showroom.connection.dbuname;
import static showroom.connection.myurl;

/**
 *
 * @author Lenovo
 */
public class addseries extends javax.swing.JInternalFrame {

    /**
     * Creates new form addseries
     */
    public addseries() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Add Series/Item");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Add Series/Items");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Series/Item Name");

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Series ID", "Name"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Series");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)))
                        .addGap(51, 51, 51))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(216, 216, 216))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel1)
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3))))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        if(validin())
{         try
 {
     Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);
 try
 {
 String q="select * from addseries where name=?";

 PreparedStatement myst = myconn.prepareStatement(q);
 myst.setString(1, jTextField1.getText());
 ResultSet myres = myst.executeQuery();
 if(myres.next()==false)
 {
      
            try
             {
                 String qu="insert into addseries(name) values(?)";//SENDING QUERY
 
                 PreparedStatement mystt = myconn.prepareStatement(qu);
                mystt.setString(1, jTextField1.getText());//FILLING QUERY
                
                int count = mystt.executeUpdate();//HERE OUTPUT IS 1 IF EXECUTED SUCCESFULLY
DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                if(count==1)
                {
                    JOptionPane.showMessageDialog(rootPane, "Series added successfully");
                           mymodel.setRowCount(0); 
             fetchtable();   
                clearfields();
                }
                else
                {
                JOptionPane.showMessageDialog(rootPane, "Series not added successfully");
                }
             }
            catch(Exception e)
                {
                JOptionPane.showMessageDialog(rootPane, "Error in inputting " + e.getMessage());
                }
        }
 
 else
 {
         JOptionPane.showMessageDialog(rootPane, "Series already added");
 }}
catch(Exception e)
 {
   JOptionPane.showMessageDialog(rootPane, "Error Occured while searching");
 }
  finally
 {
    myconn.close();
 }
 }
 catch(Exception e)
 {
   JOptionPane.showMessageDialog(rootPane, "Error Occured while connecting");
 }
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
         jButton3.setEnabled(false);
                jButton2.setEnabled(false);
               fetchtable();
    }//GEN-LAST:event_formInternalFrameOpened

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        String id = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
        try
            {
            Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);
            try
            {
            String q="select * from addseries where serid=?";

            PreparedStatement myst = myconn.prepareStatement(q);
            myst.setString(1,id);
            ResultSet myres = myst.executeQuery();

            if(myres.next())
            {
                jTextField1.setText(myres.getString("name"));
                
                jButton3.setEnabled(true);
                jButton2.setEnabled(true);

            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "No series found");
                clearfields();
                jButton3.setEnabled(false);
                jButton2.setEnabled(false);
            }

            }
            catch(Exception e)
            {
            JOptionPane.showMessageDialog(rootPane, "Error Occured while mouse clicking" + e.getMessage());
            }
            finally
            {
            myconn.close();
            }
            }
            catch(Exception e)
            {
            JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
            }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(validin())
{
   String id = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
 try  //TO UPDATE
 {
 
 Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);//IMPORTANT- WE CALL CONSTRUCTOR OR IMPORT STATIC ITS VARIABLES THAT WE USE WHILE MAKING CONNECTION  
 try
 {
 String q="update addseries set name=? where serid=?";
//UPDATE AND DELETE ARE VERY RISKY COMMANDS AS IF WE DONT ADD WHERE ALL THE RECORDS WILL BE UPDATED/DELETED
 PreparedStatement myst = myconn.prepareStatement(q);
 myst.setString(1, jTextField1.getText());
 myst.setString(2, id);
// EVERY AREA IS UPDATED AGAIN
 int count = myst.executeUpdate();
DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                   
 if(count==1)
 {
     jButton3.setEnabled(false);
                jButton2.setEnabled(false);

 
 JOptionPane.showMessageDialog(rootPane, "Series updated successfully");
 clearfields();  // THIS IS OPTIONAL
      mymodel.setRowCount(0); 
    fetchtable();
 }
 else
 {
 JOptionPane.showMessageDialog(rootPane, "Series not updated successfully");
 }

 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error Occured while updating" + e.getMessage());
 }
 finally
 {
 myconn.close();
 }
 }
 catch(Exception e)
 {
 JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
 }
}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         String id = jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString();
 int uchoice = JOptionPane.showConfirmDialog(rootPane,"Are you sure to delete?");//SHOWS A CONFIRM DIALOG BOX
 if(uchoice==JOptionPane.YES_OPTION)//YES OPTION GIVES AN INTEGER
 {
    try  
    {      //TO DELETE

        Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);
        try
        {

        String q="delete from addseries where serid=?";

        PreparedStatement myst = myconn.prepareStatement(q);
        myst.setString(1, id);
        int count = myst.executeUpdate();
        DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
        if(count==1)
        {
            jButton3.setEnabled(false);
                jButton2.setEnabled(false);
            if(jTable1.getSelectedRowCount()!=0)
            {
             JOptionPane.showMessageDialog(rootPane, "Series deleted successfully");
       
             mymodel.removeRow(jTable1.getSelectedRow());
             clearfields();
                      mymodel.setRowCount(0); 
             fetchtable();
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "Series deleted successfully");
                clearfields();
                mymodel.setRowCount(0); 
     fetchtable();
            }
        }
        else
        {
        JOptionPane.showMessageDialog(rootPane, "Series not deleted successfully");
        }

        }
        catch(Exception e)
        {
        JOptionPane.showMessageDialog(rootPane, "Error Occured while deleting" + e.getMessage());
        }
        finally
        {
        myconn.close();
        }
    }
    catch(Exception e)
    {
    JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
    }
 }
    }//GEN-LAST:event_jButton3ActionPerformed

    void fetchtable()
    {
          try              
        {
            Connection myconn = DriverManager.getConnection(myurl, dbuname, dbpass);
            try
            {
                String q="select * from addseries";
                PreparedStatement myst = myconn.prepareStatement(q);
                ResultSet myres = myst.executeQuery();
                DefaultTableModel mymodel = (DefaultTableModel)jTable1.getModel();
                if(myres.next())
                {
                   mymodel.setRowCount(0);
                 do
                 {
                    String id=myres.getString("serid");
                    String name=myres.getString("name");
                    Object myrow[] = {id,name};
                    mymodel.addRow(myrow);
                    }
                    while(myres.next());
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "No Series found");
                    mymodel.setRowCount(0);
             
                }

        }
        catch(Exception e)
        {
        JOptionPane.showMessageDialog(rootPane, "Error Occured while searching series" + e.getMessage());
        }
        finally
        {
        myconn.close();
        }
        }
        catch(Exception e)
        {
        JOptionPane.showMessageDialog(rootPane, "Error in connection " + e.getMessage());
        }
    }

     boolean validin()
    {
         if(jTextField1.getText().length()==0)
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter series name");
            return false;
        }
         else
         {
             return true;
         }
    }
         void clearfields()
    {
        jTextField1.setText(null);
     
    }
         
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
